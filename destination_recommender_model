import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing
from sklearn.model_selection import KFold

from keras.models import Sequential
from keras.layers import Dense
from keras.utils import np_utils
from keras import backend as K
from keras.models import model_from_json


from numpy import argmax

from read_data import read_data

dataframe = read_data('newdata.csv')
# Encode the dataset:
dataset = dataframe.values

# categories and columns to be encoded
name = dataset[:,0]
mail = dataset[:,1]
orig = dataset[:,2]


# label column to be encoded:
dest = dataset[:,3]

# encode name values as integers
encoder_name = preprocessing.LabelEncoder()
encoder_name.fit(name)
encoded_name = encoder_name.transform(name)

# encode mail values as integers
encoder_mail = preprocessing.LabelEncoder()
encoder_mail.fit(mail)
encoded_mail = encoder_mail.transform(mail)

# encode orig values as integers
encoder_orig = preprocessing.LabelEncoder()
encoder_orig.fit(orig)
encoded_orig = encoder_orig.transform(orig)

# encode dest values as integers
encoder_dest = preprocessing.LabelEncoder()
encoder_dest.fit(dest)
encoded_dest = encoder_dest.transform(dest)

# Create a dataframe with embedded columns:
new_dataframe = pd.DataFrame()

new_dataframe['0'] = encoded_name
new_dataframe['1'] = encoded_mail
new_dataframe['2'] = encoded_orig

new_dataframe_y = pd.DataFrame()
new_dataframe_y['Dest'] = encoded_dest

#output size:
output_size = new_dataframe_y.Dest.unique().size

X = new_dataframe
y = new_dataframe_y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2 - Model Building

yhot_train = np_utils.to_categorical(y_train)
yhot_test = np_utils.to_categorical(y_test)

def sequential_model():
    # create model:
    model = Sequential()
    # add hidden layers:
    model.add(Dense(128, input_dim=3, activation='relu'))
    model.add(Dense(64, activation = 'relu'))
    model.add(Dense(32, activation = 'relu'))
    model.add(Dense(16, activation = 'relu'))
    # output layer:
    model.add(Dense(output_size, activation='softmax'))
    # compile model:
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

model = sequential_model()
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train, yhot_train, validation_split=0.33,
                    epochs=1500, batch_size=32, verbose=0)

_, accuracy = model.evaluate(X_test, yhot_test)
#print('Accuracy from evaluate: %.2f' % (accuracy*100))

# PREDICTION

predict_x = model.predict(X_test)
pred = np.argmax(predict_x, axis=1)

df = pd.DataFrame()
df["Dest"] = encoder_dest.inverse_transform(argmax(yhot_test, axis=1))
df["Pred_Dest"] = encoder_dest.inverse_transform(pred)

#print(df)

new_test = pd.DataFrame()
new_test['0'] = [54]
new_test['1'] = [21]
new_test['2'] = [20]


# SAVE MODEL
model.save_weights('model_weights.h5')
json_string = model.to_json()
f = open("model_architecture.json",'w')
f.write(json_string)
f.close()